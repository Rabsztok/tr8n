{
  "locale": "en",
  "english_name": "English",
  "google_key": "en",
  "context_rules": {
    "number": {
      "keys": [
        "one",
        "other"
      ],
      "token_expression": "/.*(count|num|minutes|seconds|hours|sum|total)(\\d)*$/",
      "variables": [
        "@n"
      ],
      "token_mapping": [
        {
          "one": "{$0}",
          "other": "{$0::plural}"
        },
        {
          "one": "{$0}",
          "other": "{$1}"
        }
      ],
      "default_rule": "other",
      "rules": {
        "one": {
          "rule": "(= @n 1)",
          "description": "{token} is 1",
          "examples": "1"
        },
        "other": {
          "description": "{token} is not 1",
          "examples": "0, 2-999; 1.2, 2.07..."
        }
      }
    },
    "gender": {
      "keys": [
        "male",
        "female",
        "other"
      ],
      "token_expression": "/.*(user|translator|profile|actor|target)(\\d)*$/",
      "variables": [
        "@gender"
      ],
      "token_mapping": [
        {
          "other": "{$0}"
        },
        {
          "male": "{$0}",
          "female": "{$1}",
          "other": "{$0}/{$1}"
        },
        {
          "male": "{$0}",
          "female": "{$1}",
          "other": "{$2}"
        }
      ],
      "default_rule": "other",
      "rules": {
        "male": {
          "rule": "(= 'male' @gender)",
          "description": "{token} is a male"
        },
        "female": {
          "rule": "(= 'female' @gender)",
          "description": "{token} is a female"
        },
        "other": {
          "description": "{token}'s gender is unknown"
        }
      }
    },
    "list": {
      "keys": [
        "one",
        "other"
      ],
      "token_expression": "/.*(items|list)(\\d)*$/",
      "variables": [
        "@count"
      ],
      "token_mapping": [
        "unsupported",
        {
          "one": "{$0}",
          "other": "{$1}"
        }
      ],
      "default_rule": "other",
      "rules": {
        "one": {
          "rule": "(= 1 @count)",
          "description": "{token} contains 1 element"
        },
        "other": {
          "description": "{token} contains at least 2 elements"
        }
      }
    },
    "date": {
      "keys": [
        "past",
        "present",
        "future"
      ],
      "token_expression": "/.*(date|time)(\\d)*$/",
      "variables": [
        "@date"
      ],
      "token_mapping": [
        "unsupported",
        "unsupported",
        {
          "past": "{$0}",
          "present": "{$1}",
          "future": "{$2}"
        }
      ],
      "default_rule": "present",
      "rules": {
        "past": {
          "rule": "(> @date (today))",
          "description": "{token} is in the future"
        },
        "present": {
          "rule": "(= @date (today))",
          "description": "{token} is in the present"
        },
        "future": {
          "rule": "(< @date (today))",
          "description": "{token} is in the past"
        }
      }
    },
    "genders": {
      "keys": [
        "male",
        "female",
        "unknown",
        "other"
      ],
      "token_expression": "/.*(users|profiles|actors|targets)(\\d)*$/",
      "variables": [
        "@genders"
      ],
      "token_mapping": [
        "unsupported",
        {
          "male": "{$0}",
          "female": "{$0}",
          "unknown": "{$0}",
          "other": "{$1}"
        },
        {
          "male": "{$0}",
          "female": "{$1}",
          "unknown": "{$0}",
          "other": "{$2}"
        },
        {
          "male": "{$0}",
          "female": "{$1}",
          "unknown": "{$2}",
          "other": "{$3}"
        }
      ],
      "default_rule": "other",
      "rules": {
        "male": {
          "rule": "(&& (= 1 (count @genders)) (all @genders 'male'))",
          "description": "{token} contains 1 male"
        },
        "female": {
          "rule": "(&& (= 1 (count @genders)) (all @genders 'female'))",
          "description": "{token} contains 1 female"
        },
        "unknown": {
          "rule": "(&& (= 1 (count @genders)) (all @genders 'unknown'))",
          "description": "{token} contains 1 person with unknown gender"
        },
        "other": {
          "description": "{token} contains at least 2 people"
        }
      }
    }
  },
  "language_cases": {
    "ord": {
      "latin_name": "Ordinal",
      "description": "The adjective form of the cardinal numbers",
      "application": "phrase",
      "rules": [
        {
          "conditions": "(&& (match '/1$/' @value) (! (match '/11$/' @value)))",
          "operations": "(append 'st' @value)",
          "description": "append 'st' if value ends in 1, but not in 11",
          "examples": "1, 21, 31, 41, 101, 121..."
        },
        {
          "conditions": "(&& (match '/2$/' @value) (! (match '/12$/' @value)))",
          "operations": "(append 'nd' @value)",
          "description": "append 'nd' if value ends in 2, but not in 12",
          "examples": "2, 22, 32, 42, 102, 122..."
        },
        {
          "conditions": "(&& (match '/3$/' @value) (! (match '/13$/' @value)))",
          "operations": "(append 'rd' @value)",
          "description": "append 'nd' if value ends in 3, but not in 13",
          "examples": "3, 23, 33, 43, 103, 123..."
        },
        {
          "conditions": "(true)",
          "operations": "(append 'th' @value)",
          "description": "append 'th' in all other cases",
          "examples": "0, 4, 5, 6, 7, 8, 9, 11, 12, 13, 111, 113..."
        }
      ]
    },
    "ordinal": {
      "latin_name": "Ordinal",
      "description": "The adjective form of the cardinal numbers",
      "application": "phrase",
      "rules": [
        {
          "conditions": "(= 1 @value)",
          "operations": "(replace 1 'first' @value)",
          "description": "replace 1 with 'first'"
        },
        {
          "conditions": "(= 2 @value)",
          "operations": "(replace 2 'first' @value)",
          "description": "replace 2 with 'second'"
        },
        {
          "conditions": "(= 3 @value)",
          "operations": "(replace 3 'third' @value)",
          "description": "replace 3 with 'third'"
        }
      ]
    },
    "pos": {
      "latin_name": "Possessive",
      "description": "Used to indicate possession (i.e., ownership). It is usually created by adding 's to the word",
      "application": "phrase",
      "rules": [
        {
          "conditions": "(match '/s$/' @value)",
          "operations": "(append \"'\" @value)",
          "description": "if value ends in s, append '"
        },
        {
          "conditions": "(true)",
          "operations": "(append \"'s\" @value)",
          "description": "in all other cases, append 's"
        }
      ]
    },
    "times": {
      "latin_name": "Iteration",
      "description": "The iteration form of the cardinal numbers",
      "application": "phrase",
      "rules": [
        {
          "conditions": "(= 1 @value)",
          "operations": "(replace '1' 'once' @value)",
          "description": "replace '1' with 'once'"
        },
        {
          "conditions": "(= 2 @value)",
          "operations": "(replace '2' 'twice' @value)",
          "description": "replace '2' with 'twice'"
        },
        {
          "conditions": "(true)",
          "operations": "(append ' times' @value)",
          "description": "in all other cases, append x times"
        }
      ]
    },
    "plural": {
      "latin_name": "Plural",
      "description": "Converts singular form to plural",
      "application": "phrase",
      "rules": [
        {
          "conditions": "(in 'sheep,fish,series,species,money,rice,information,equipment' @value)",
          "operations": "@value",
          "description": "Uncountable word"
        },
        {
          "conditions": "(= 'move' @value)",
          "operations": "(quote 'moves')",
          "description": "Irregular word"
        },
        {
          "conditions": "(= 'sex' @value)",
          "operations": "(quote 'sexes')",
          "description": "Irregular word"
        },
        {
          "conditions": "(= 'child' @value)",
          "operations": "(quote 'children')",
          "description": "Irregular word"
        },
        {
          "conditions": "(= 'person' @value)",
          "operations": "(quote 'people')",
          "description": "Irregular word"
        },
        {
          "conditions": "(match '/(quiz)$/i' @value)",
          "operations": "(replace '/(quiz)$/i' '$1zes' @value)"
        },
        {
          "conditions": "(match '/^(ox)$/i' @value)",
          "operations": "(replace '/^(ox)$/i' '$1en' @value)"
        },
        {
          "conditions": "(match '/([m|l])ouse$/i' @value)",
          "operations": "(replace '/([m|l])ouse$/i' '$1ice' @value)"
        },
        {
          "conditions": "(match '/(matr|vert|ind)ix|ex$/i' @value)",
          "operations": "(replace '/(matr|vert|ind)ix|ex$/i' '$1ices' @value)"
        },
        {
          "conditions": "(match '/(x|ch|ss|sh)$/i' @value)",
          "operations": "(replace '/(x|ch|ss|sh)$/i' '$1es' @value)"
        },
        {
          "conditions": "(match '/([^aeiouy]|qu)y$/i' @value)",
          "operations": "(replace '/([^aeiouy]|qu)y$/i' '$1ies' @value)"
        },
        {
          "conditions": "(match '/([^aeiouy]|qu)ies$/i' @value)",
          "operations": "(replace '/([^aeiouy]|qu)ies$/i' '$1y' @value)"
        },
        {
          "conditions": "(match '/(hive)$/i' @value)",
          "operations": "(replace '/(hive)$/i' '$1s' @value)"
        },
        {
          "conditions": "(match '/(?:([^f])fe|([lr])f)$/i' @value)",
          "operations": "(replace '/(?:([^f])fe|([lr])f)$/i' '$1$2ves' @value)"
        },
        {
          "conditions": "(match '/sis$/i' @value)",
          "operations": "(replace '/sis$/i' 'ses' @value)"
        },
        {
          "conditions": "(match '/([ti])um$/i' @value)",
          "operations": "(replace '/([ti])um$/i' '$1a' @value)"
        },
        {
          "conditions": "(match '/(buffal|tomat|potat)o$/i' @value)",
          "operations": "(replace '/(buffal|tomat|potat)o$/i' '$1oes' @value)"
        },
        {
          "conditions": "(match '/(bu)s$/i' @value)",
          "operations": "(replace '/(bu)s$/i' '$1ses' @value)"
        },
        {
          "conditions": "(match '/(alias|status)$/i' @value)",
          "operations": "(replace '/(alias|status)$/i' '$1es' @value)"
        },
        {
          "conditions": "(match '/(octop)us$/i' @value)",
          "operations": "(replace '/(octop)us$/i' '$1i' @value)"
        },
        {
          "conditions": "(match '/(ax|test)is$/i' @value)",
          "operations": "(replace '/(ax|test)is$/i' '$1es' @value)"
        },
        {
          "conditions": "(match '/us$/i' @value)",
          "operations": "(replace '/us$/i' '$1es' @value)"
        },
        {
          "conditions": "(match '/s$/i' @value)",
          "operations": "(replace '/s$/i' 's' @value)"
        },
        {
          "conditions": "(match '/$/' @value)",
          "operations": "(replace '/$/' 's' @value)"
        }
      ]
    },
    "singular": {
      "latin_name": "Singular",
      "description": "Converts plural form to singular",
      "application": "phrase",
      "rules": [
        {
          "conditions": "(in 'sheep,fish,series,species,money,rice,information,equipment' @value)",
          "operations": "@value",
          "description": "Uncountable word"
        },
        {
          "conditions": "(= 'moves' @value)",
          "operations": "(quote 'move')",
          "description": "Irregular word"
        },
        {
          "conditions": "(= 'sexes' @value)",
          "operations": "(quote 'sex')",
          "description": "Irregular word"
        },
        {
          "conditions": "(= 'children' @value)",
          "operations": "(quote 'child')",
          "description": "Irregular word"
        },
        {
          "conditions": "(= 'people' @value)",
          "operations": "(quote 'person')",
          "description": "Irregular word"
        },
        {
          "conditions": "(match '/(n)ews$/i' @value)",
          "operations": "(replace '/(n)ews$/i' '$1ews' @value)"
        },
        {
          "conditions": "(match '/([ti])a$/i' @value)",
          "operations": "(replace '/([ti])a$/i' '$1um' @value)"
        },
        {
          "conditions": "(match '/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/i' @value)",
          "operations": "(replace '/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/i' '$1$2sis' @value)"
        },
        {
          "conditions": "(match '/(^analy)ses$/i' @value)",
          "operations": "(replace '/(^analy)ses$/i' '$1sis' @value)"
        },
        {
          "conditions": "(match '/([^f])ves$/i' @value)",
          "operations": "(replace '/([^f])ves$/i' '$1fe' @value)"
        },
        {
          "conditions": "(match '/(hive)s$/i' @value)",
          "operations": "(replace '/(hive)s$/i' '$1' @value)"
        },
        {
          "conditions": "(match '/(tive)s$/i' @value)",
          "operations": "(replace '/(tive)s$/i' '$1' @value)"
        },
        {
          "conditions": "(match '/([lr])ves$/i' @value)",
          "operations": "(replace '/([lr])ves$/i' '$1f' @value)"
        },
        {
          "conditions": "(match '/([^aeiouy]|qu)ies$/i' @value)",
          "operations": "(replace '/([^aeiouy]|qu)ies$/i' '$1y' @value)"
        },
        {
          "conditions": "(match '/(s)eries$/i' @value)",
          "operations": "(replace '/(s)eries$/i' '$1eries' @value)"
        },
        {
          "conditions": "(match '/(m)ovies$/i' @value)",
          "operations": "(replace '/(m)ovies$/i' '$1ovie' @value)"
        },
        {
          "conditions": "(match '/(x|ch|ss|sh)es$/i' @value)",
          "operations": "(replace '/(x|ch|ss|sh)es$/i' '$1' @value)"
        },
        {
          "conditions": "(match '/([m|l])ice$/i' @value)",
          "operations": "(replace '/([m|l])ice$/i' '$1ouse' @value)"
        },
        {
          "conditions": "(match '/(bus)es$/i' @value)",
          "operations": "(replace '/(bus)es$/i' '$1' @value)"
        },
        {
          "conditions": "(match '/(o)es$/i' @value)",
          "operations": "(replace '/(o)es$/i' '$1' @value)"
        },
        {
          "conditions": "(match '/(shoe)s$/i' @value)",
          "operations": "(replace '/(shoe)s$/i' '$1' @value)"
        },
        {
          "conditions": "(match '/(cris|ax|test)es$/i' @value)",
          "operations": "(replace '/(cris|ax|test)es$/i' '$1is' @value)"
        },
        {
          "conditions": "(match '/(octop|vir)i$/i' @value)",
          "operations": "(replace '/(octop|vir)i$/i' '$1us' @value)"
        },
        {
          "conditions": "(match '/(alias|status)es$/i' @value)",
          "operations": "(replace '/(alias|status)es$/i' '$1' @value)"
        },
        {
          "conditions": "(match '/^(ox)en$/i' @value)",
          "operations": "(replace '/^(ox)en$/i' '$1' @value)"
        },
        {
          "conditions": "(match '/(vert|ind)ices$/i' @value)",
          "operations": "(replace '/(vert|ind)ices$/i' '$1ex' @value)"
        },
        {
          "conditions": "(match '/(matr)ices$/i' @value)",
          "operations": "(replace '/(matr)ices$/i' '$1ix' @value)"
        },
        {
          "conditions": "(match '/(quiz)zes$/i' @value)",
          "operations": "(replace '/(quiz)zes$/i' '$1' @value)"
        },
        {
          "conditions": "(match '/(us)es$/i' @value)",
          "operations": "(replace '/(us)es$/i' '$1' @value)"
        },
        {
          "conditions": "(match '/s$/i' @value)",
          "operations": "(replace '/s$/i' '' @value)"
        }
      ]
    }
  },
  "localization": {
    "calendar": {
      "default_day_names": [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ],
      "default_abbr_day_names": [
        "Sun",
        "Mon",
        "Tue",
        "Wed",
        "Thu",
        "Fri",
        "Sat"
      ],
      "default_month_names": [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
      ],
      "default_abbr_month_names": [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
      ],
      "custom_date_formats": {
        "default": "%m/%d/%Y",
        "short_numeric": "%m/%d",
        "short_numeric_year": "%m/%d/%y",
        "long_numeric": "%m/%d/%Y",
        "verbose": "%A, %B %d, %Y",
        "monthname": "%B %d",
        "monthname_year": "%B %d, %Y",
        "monthname_abbr": "%b %d",
        "monthname_abbr_year": "%b %d, %Y",
        "date_time": "%m/%d/%Y at %H:%M"
      }
    }
  },
  "native_name": "English"
}